{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\CS\\\\React_JS\\\\projects\\\\23.next-js-bigger-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from 'next/head';\nimport { Fragment } from 'react';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Add a new Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Add your own meetups and create amazing networking opportunities.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://trangdao909:Bluebaby123!@cluster0.zv8xl.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollections = db.collection('meetups'); // create a collection if not exist.\n\n  const meetups = await meetupsCollections.find({}, {\n    _id: 1\n  }).toArray(); // get all data from the database\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://trangdao909:Bluebaby123!@cluster0.zv8xl.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollections = db.collection('meetups'); // create a collection if not exist.\n\n  const selectedMeetup = await meetupsCollections.findOne({\n    _id: ObjectId(meetupId)\n  }); // get 1 document from the database\n\n  client.close(); // fetch data from API\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      },\n      revalidate: 10\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["E:/CS/React_JS/projects/23.next-js-bigger-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","Head","Fragment","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollections","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id","revalidate"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,SAApC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAGI,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC9B,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,OAAO,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,YAAD;AACI,MAAA,KAAK,EAAIA,KAAK,CAACC,UAAN,CAAiBC,KAD9B;AAEI,MAAA,KAAK,EAAIF,KAAK,CAACC,UAAN,CAAiBE,KAF9B;AAGI,MAAA,OAAO,EAAIH,KAAK,CAACC,UAAN,CAAiBG,OAHhC;AAII,MAAA,WAAW,EAAIJ,KAAK,CAACC,UAAN,CAAiBI;AAJpC;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAClC,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoB,uGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CAHkC,CAGmB;;AACrD,QAAMC,OAAO,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA4B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA5B,EAAsCC,OAAtC,EAAtB,CAJkC,CAIqC;;AACvER,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAAEC,MAAAA,MAAM,EAAG;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AAAX,KAAL,CAAlB;AAFJ,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAAoB,uGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CAJ0C,CAIW;;AACrD,QAAMe,cAAc,GAAG,MAAMhB,kBAAkB,CAACiB,OAAnB,CAA2B;AAACb,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AAAd,GAA3B,CAA7B,CAL0C,CAK0C;;AACpFf,EAAAA,MAAM,CAACS,KAAP,GAN0C,CAQ1C;;AACA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADI;AAERpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFd;AAGRC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHhB;AAIRC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAJpB;AAKRH,QAAAA,KAAK,EAAEwB,cAAc,CAACxB;AALd,OADT;AAQP2B,MAAAA,UAAU,EAAE;AARL;AADJ,GAAP;AAWF;AACF,eAAe9B,aAAf","sourcesContent":["import {MongoClient, ObjectId} from 'mongodb';\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport Head from 'next/head';\r\nimport { Fragment } from 'react';\r\n\r\n\r\n    function MeetupDetails(props) {\r\n    return (\r\n        <Fragment>\r\n            <Head>\r\n                <title>Add a new Meetups</title>\r\n                <meta \r\n                    name='description'\r\n                    content='Add your own meetups and create amazing networking opportunities.'\r\n                />\r\n            </Head>\r\n            <MeetupDetail \r\n                image = {props.meetupData.image}\r\n                title = {props.meetupData.title}\r\n                address = {props.meetupData.address}\r\n                description = {props.meetupData.description} />   \r\n\r\n        </Fragment>\r\n       )   \r\n}\r\n\r\nexport async function getStaticPaths(){\r\n    const client = await MongoClient.connect('mongodb+srv://trangdao909:Bluebaby123!@cluster0.zv8xl.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollections = db.collection('meetups'); // create a collection if not exist.\r\n    const meetups = await meetupsCollections.find({}, {_id: 1}).toArray(); // get all data from the database\r\n    client.close()\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map(meetup => ({ params : { meetupId: meetup._id.toString() }}))       \r\n    } \r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetupId = context.params.meetupId;   \r\n    const client = await MongoClient.connect('mongodb+srv://trangdao909:Bluebaby123!@cluster0.zv8xl.mongodb.net/meetups?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n    const meetupsCollections = db.collection('meetups'); // create a collection if not exist.\r\n    const selectedMeetup = await meetupsCollections.findOne({_id: ObjectId(meetupId)}); // get 1 document from the database\r\n    client.close()\r\n\r\n    // fetch data from API\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                address: selectedMeetup.address,\r\n                description: selectedMeetup.description,\r\n                image: selectedMeetup.image\r\n        },\r\n        revalidate: 10\r\n    }\r\n}}\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}